buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven"

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // Hwyla
        url "https://maven.mcmoddev.com/"
    }
    maven { // TheOneProbe / Chisel
        url "https://maven.tterrag.com/"
    }
    maven { // RedstoneFlux
        url "https://maven.covers1624.net/"
    }
    maven { // Tesla
        url "https://maven.blamejared.com/"
    }
    maven { // intwheel / mcjtylib / rftools
        url "https://maven.k-4u.nl/"
    }
    maven { // OpenComputers
        url "https://maven.cil.li/"
    }
}

if (System.getenv().DRONE_BUILD_NUMBER)
    version += "." + System.getenv().DRONE_BUILD_NUMBER
group = "mcjty.rftoolsdim" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "rftoolsdim"

sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    mappings = mcp_mappings
    useDepAts = true
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "dev"
}

artifacts {
    archives sourceJar
    archives deobfJar
}

dependencies {

    deobfCompile "mezz.jei:jei_${jei_version}"
    deobfCompile "mcp.mobius.waila:Hwyla:${hwaila_version}"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-${theoneprobe_version}"
    deobfCompile "cofh:RedstoneFlux:${redstoneflux_version}"
    deobfCompile "net.darkhax.tesla:Tesla-${tesla_version}"
    deobfCompile "com.github.mcjty:intwheel:${intwheel_version}"
    deobfCompile "com.github.mcjty:mcjtylib:${mcjtylib_version}"
    //deobfCompile "com.github.mcjty:rftools:${rftools_version}"
    compile project(":RFTools")
    deobfCompile "li.cil.oc:OpenComputers:${opencomputers_version}"
    deobfCompile "team.chisel:Chisel:${chisel_version}:api"
}

jar {
    manifest {
        attributes "FMLAT": "rftoolsdim_at.cfg"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
